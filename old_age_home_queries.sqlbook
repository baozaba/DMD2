-- SQLBook: Code
CREATE TABLE doctors (
    doctor_id SERIAL PRIMARY KEY,
    name TEXT NOT NULL,
    specialization TEXT NOT NULL
);
CREATE TABLE nurses (
    nurse_id SERIAL PRIMARY KEY,
    name TEXT NOT NULL,
    shift TEXT NOT NULL 
);
CREATE TABLE patients (
    patient_id SERIAL PRIMARY KEY,
    name TEXT NOT NULL,
    age INT NOT NULL,
    room_no INT NOT NULL,
    doctor_id INT REFERENCES doctors(doctor_id)
);
CREATE TABLE treatments (
    treatment_id SERIAL PRIMARY KEY,
    patient_id INT REFERENCES patients(patient_id),
    nurse_id INT REFERENCES nurses(nurse_id),
    treatment_type TEXT NOT NULL,
    treatment_time TIMESTAMP NOT NULL
);
CREATE TABLE sensors (
    sensor_id SERIAL PRIMARY KEY,
    patient_id INT REFERENCES patients(patient_id),
    sensor_type TEXT NOT NULL,
    reading NUMERIC NOT NULL,
    reading_time TIMESTAMP NOT NULL
);
INSERT INTO doctors (name, specialization) VALUES
('Dr. Smith', 'Geriatrics'),
('Dr. Johnson', 'Cardiology'),
('Dr. Lee', 'Neurology'),
('Dr. Patel', 'Endocrinology'),
('Dr. Adams', 'General Medicine');
INSERT INTO nurses (name, shift) VALUES
('Nurse Ann', 'Morning'),   
('Nurse Ben', 'Evening'),   
('Nurse Eva', 'Night'),     
('Nurse Kim', 'Morning'),   
('Nurse Omar', 'Evening');  
INSERT INTO patients (name, age, room_no, doctor_id) 
VALUES
('Alice', 82, 101, 1),
('Bob', 79, 102, 2),
('Carol', 85, 103, 1),
('David', 88, 104, 3),
('Ella', 77, 105, 2),
('Frank', 91, 106, 4);
INSERT INTO treatments (patient_id, nurse_id, treatment_type, treatment_time) VALUES
(1, 1, 'Physiotherapy', '2025-09-10 09:00:00'),
(2, 2, 'Medication', '2025-09-10 18:00:00'),
(1, 3, 'Medication', '2025-09-11 21:00:00'),
(3, 1, 'Checkup', '2025-09-12 10:00:00'),
(4, 2, 'Physiotherapy', '2025-09-12 17:00:00'),
(5, 5, 'Medication', '2025-09-12 18:00:00'),
(6, 4, 'Physiotherapy', '2025-09-13 09:00:00');

SELECT * FROM patients; 
SELECT * FROM patients WHERE age > 80; 
SELECT name, specialization FROM doctors ORDER BY specialization;

SELECT p.name AS patient, p.age, d.name AS doctor
FROM patients p
JOIN doctors d ON d.doctor_id = p.doctor_id
WHERE d.name = 'Dr. Smith';

SELECT p.name AS patient, t.treatment_type, t.treatment_time
FROM patients p
LEFT JOIN treatments t ON p.patient_id = t.patient_id;

SELECT COUNT(*) AS total_treatments FROM treatments;

SELECT SUM(s.reading) AS total_steps FROM sensors s WHERE s.sensor_type = 'Steps';

SELECT AVG(age) AS avg_age FROM patients;

SELECT MIN(age) AS youngest FROM patients;

SELECT MAX(age) AS oldest FROM patients;

SELECT d.name AS doctor, COUNT(p.patient_id) AS num_patients
FROM doctors d
LEFT JOIN patients p ON d.doctor_id = p.doctor_id
GROUP BY d.name;

SELECT n.name AS nurse, MAX(t.treatment_time) AS last_treatment_time FROM nurses n
LEFT JOIN treatments t ON n.nurse_id = t.nurse_id
GROUP BY n.name
ORDER BY last_treatment_time DESC NULLS LAST;

SELECT p.name,
       COUNT(t.treatment_id) AS num_treatments,
       (SELECT AVG(cnt)
        FROM (
            SELECT COUNT(*) AS cnt
            FROM treatments
            GROUP BY patient_id
        ) sub) AS avg_treatments
FROM patients p
LEFT JOIN treatments t ON p.patient_id = t.patient_id
WHERE p.age > 80
GROUP BY p.name;


CREATE TABLE medication_stock (
    medication_id SERIAL PRIMARY KEY, 
    medication_name VARCHAR(50) NOT NULL,
    quantity INT NOT NULL 
);


INSERT INTO medication_stock (medication_name, quantity) VALUES
('Aspirin ', 120),   
('Ibuprofen ', 80),    
('Metformin ', 50),  
('Lisinopril ', 30), 
('Paracetamol ', 150); 
--q1
SELECT name AS patient_name, age AS patient_age 
FROM patients;
--q2
SELECT name AS cardiology_doctor_name, specialization AS specialization 
FROM doctors 
WHERE specialization = 'Cardiology';
--q3
SELECT *
FROM patients 
WHERE age > 80;
--q4
SELECT name AS patient_name, age AS patient_age 
FROM patients 
ORDER BY age ASC;
--q5
SELECT specialization AS doctor_specialization, COUNT(doctor_id) AS doctor_count 
FROM doctors 
GROUP BY specialization;
--q6
SELECT 
    p.name AS patient_name, 
    d.name AS doctor_name 
FROM patients p
JOIN doctors d 
ON p.doctor_id = d.doctor_id;
--q7
SELECT 
    t.treatment_type AS treatment_type, 
    t.treatment_time AS treatment_time, 
    p.name AS patient_name, 
    d.name AS doctor_name 
FROM treatments t
JOIN patients p ON t.patient_id = p.patient_id
JOIN doctors d ON p.doctor_id = d.doctor_id;
--q8
SELECT 
    d.name AS doctor_name, 
    COUNT(p.patient_id) AS supervised_patient_count 
FROM doctors d
LEFT JOIN patients p ON d.doctor_id = p.doctor_id
GROUP BY d.doctor_id, d.name;
--q9
SELECT AVG(age) AS average_age 
FROM patients;
--q10
WITH treatment_counts AS (
    SELECT 
        treatment_type, 
        COUNT(*) AS count
    FROM treatments 
    GROUP BY treatment_type
)
SELECT treatment_type AS most_common_treatment_type 
FROM treatment_counts 
WHERE count = (SELECT MAX(count) FROM treatment_counts);
--q11
SELECT name AS patient_name, age AS patient_age 
FROM patients 
WHERE age > (SELECT AVG(age) FROM patients);
--q12
SELECT 
    d.name AS doctor_name, 
    COUNT(p.patient_id) AS supervised_patient_count 
FROM doctors d
LEFT JOIN patients p ON d.doctor_id = p.doctor_id
GROUP BY d.name
HAVING COUNT(p.patient_id) > 5;
--q13
SELECT 
    t.treatment_type AS treatment_type, 
    t.treatment_time AS treatment_time, 
    n.name AS nurse_name, 
    p.name AS patient_name 
FROM treatments t
JOIN nurses n ON t.nurse_id = n.nurse_id
JOIN patients p ON t.patient_id = p.patient_id
WHERE n.shift = 'Morning';
--q14
WITH ranked_treatments AS (
    SELECT 
        *,
        ROW_NUMBER() OVER (PARTITION BY patient_id ORDER BY treatment_time DESC) AS rn
    FROM treatments
)
SELECT 
    p.name AS patient_name, 
    rt.treatment_type AS latest_treatment_type, 
    rt.treatment_time AS latest_treatment_time 
FROM ranked_treatments rt
JOIN patients p ON rt.patient_id = p.patient_id
WHERE rt.rn = 1;
--q15
SELECT 
    d.name AS doctor_name, 
    COALESCE(AVG(p.age), 0) AS avg_patient_age 
FROM doctors d
LEFT JOIN patients p ON d.doctor_id = p.doctor_id
GROUP BY d.name;
--q16
SELECT d.name AS doctor_name 
FROM doctors d
LEFT JOIN patients p ON d.doctor_id = p.doctor_id
GROUP BY d.name
HAVING COUNT(p.patient_id) > 3;
--q17
SELECT name AS patient_name_without_treatment 
FROM patients 
WHERE patient_id NOT IN (SELECT patient_id FROM treatments);
--q18
SELECT medication_name AS medicine_with_low_stock, quantity AS current_quantity 
FROM medication_stock 
WHERE quantity < (SELECT AVG(quantity) FROM medication_stock);
--q19
SELECT 
    d.name AS doctor_name, 
    p.name AS patient_name, 
    p.age AS patient_age,
    RANK() OVER (PARTITION BY d.doctor_id ORDER BY p.age ASC) AS age_rank
FROM doctors d
LEFT JOIN patients p ON d.doctor_id = p.doctor_id
WHERE p.patient_id IS NOT NULL;
--q20
WITH spec_max_age AS (
    SELECT 
        d.specialization, 
        MAX(p.age) AS max_patient_age
    FROM doctors d
    JOIN patients p ON d.doctor_id = p.doctor_id
    GROUP BY d.specialization
)
SELECT 
    sma.specialization AS doctor_specialization, 
    d.name AS doctor_with_oldest_patient, 
    p.name AS oldest_patient_name, 
    p.age AS patient_age
FROM spec_max_age sma
JOIN doctors d ON sma.specialization = d.specialization
JOIN patients p ON d.doctor_id = p.doctor_id
WHERE p.age = sma.max_patient_age;



